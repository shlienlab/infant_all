---
title: "Figure 2: NUTM1 DEGs"
author: "Matthew Zatzman"
date: "`r Sys.Date()`"
execute: 
  warning: false
  error: false
format: 
  html:
    embed-resources: true
    code-tools: true
    toc: true
---


```{r setup}
library(tidyverse)
library(ComplexHeatmap)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(SummarizedExperiment)
library(ggrastr)
library(ggh4x)
library(readxl)
library(ggrepel)
library(DESeq2)
library(ggbeeswarm)
library(glue)
library(here)
```


# Load counts


```{r}
counts_se_f <- here("paper_data", "counts_se_fig2.rds")

if (!file.exists(counts_se_f)) {
  kmt2a_posctrl <- c("21-10053", "21-10054", "21-10055", "21-10057", "21-10058")

low_qual_rna <- c("PAUWGW", "21-22117", "kics_14_328870", "PAUFPD")

infall_counts <- read.table(here("paper_data", "infant_all_counts.txt.gz"), header = T, sep = "\t", row.names = 1, check.names = F)

inf_meta <- read.table(file = here("paper_data", "sk_cohort_meta.txt"), header = T, sep = "\t")

panball_mpal_counts <- read.table(here("paper_data", "pan_ball_mpal_counts.txt.gz"), header = T, sep = "\t", row.names = 1, check.names = F)

panball_mpal_meta <- read_excel(path = here("paper_data", "Supplemental_Tables_1_5.xlsx"), sheet = 4, skip = 1) %>%
  as.data.frame()
rownames(panball_mpal_meta) <- panball_mpal_meta$SampleId

ex <- exonsBy(TxDb.Hsapiens.UCSC.hg38.knownGene, "gene")
## reduce to longest exon extents
ex <- GenomicRanges::reduce(ex)
## compute exon lengths, by gene
exlen <- relist(width(unlist(ex)), ex)
## add them up
exlens <- sapply(exlen, sum)

common_genes <- intersect(rownames(panball_mpal_counts), rownames(infall_counts))

counts_merged <- cbind(infall_counts[common_genes,], panball_mpal_counts[common_genes,]) %>%
  as.matrix()

ids <- clusterProfiler::bitr(rownames(counts_merged), fromType = "ENSEMBL", toType = "SYMBOL", OrgDb = "org.Hs.eg.db", drop = T)

ids_ent <- clusterProfiler::bitr(ids$ENSEMBL, fromType = "ENSEMBL", toType = "ENTREZID", OrgDb = "org.Hs.eg.db", drop = T)

gene_map <- inner_join(ids, ids_ent) %>%
  filter(!is.na(SYMBOL)) %>%
  distinct(ENSEMBL, .keep_all = T)

gene_map$gene_length <- exlens[match(gene_map$ENTREZID, names(exlens))]

rownames(counts_merged) <- ids[match(rownames(counts_merged), ids$ENSEMBL), "SYMBOL"]

# Sum counts from same genes to uniqify
counts_merged <- rowsum(counts_merged, row.names(counts_merged))
counts_merged <- counts_merged[!is.na(rownames(counts_merged)),]


meta_merge <- rbind(panball_mpal_meta, inf_meta)
rownames(meta_merge) <- meta_merge$SampleId
meta_merge <- meta_merge[colnames(counts_merged),]

se <- SummarizedExperiment(assays = list(counts = round(counts_merged)), colData = meta_merge)

# Remove ribosomal and mitochondrial genes
rb.genes <- grep("^RP[SL]", rownames(se), value = T)
mt.genes <- grep("^MRP[SL]|^MT-", rownames(se), value = T)

se <- se[!rownames(se) %in% c(rb.genes, mt.genes)]

# CPM normalize
assay(se, "cpm") <- edgeR::cpm(se)

# Add gene info
rowData(se) <- gene_map[match(rownames(se), gene_map$SYMBOL), ]

# FPKM normalize
assay(se, "rpkm") <- edgeR::rpkm(se, gene.length = rowData(se)$gene_length)

# Compute TPMs
tpm3 <- function(counts, len) {
  x <- counts / len
  return(t(t(x) * 1e6 / colSums(x, na.rm = T)))
}
assay(se, "tpm") <- tpm3(counts = assay(se, "counts"), len = rowData(se)$gene_length)

rowData(se)$tpm_var <- rowVars(assay(se, "tpm"))

se <- se[, !colnames(se) %in% low_qual_rna]

se <- se[, se$cohort %in% c("Pan_Ball", "SJMPAL", "SK") & se$disease %in% c("MPAL", "B-ALL")]

se$cohort <- factor(se$cohort)
se$cohort <- factor(se$cohort, labels = c("Pan B-ALL", "SJ MPAL", "This Study"))


se$nutm1_rank <- rank(assay(se, "tpm")["NUTM1", ], ties.method = "first")
# Label NUTM1 samples
se$NUTM1r <- assay(se, "tpm")["NUTM1", ] > 10

saveRDS(se, file = counts_se_f)
} else {
  se <- readRDS(counts_se_f)
}


```

# NUTM1

## Pan Cohort Expression

```{r, fig.height=5, fig.width=5}
pan_nutm1_dotplot <- scater::makePerCellDF(se, features = "NUTM1", assay.type = "tpm", use.dimred = F, use.coldata = T, use.altexps = F) %>%
  mutate(subtype_nutm1 = factor(ifelse(NUTM1r, "NUTM1", as.character(subtype)))) %>%
  add_count(cohort, subtype_nutm1) %>%
  mutate(subtype_nutm1_lab = glue("{subtype_nutm1} (n={n})")) %>%
  filter(cohort != "SJ MPAL") %>%
  ggplot(aes(y = fct_rev(subtype_nutm1_lab), x = NUTM1)) +
  rasterize(geom_quasirandom(size = 0.75), dpi = 150) +
  facet_grid(cohort ~ ., scales = "free_y", space = "free_y", switch = "y") +
  theme_classic() +
  theme(
    strip.text.y.left = element_text(angle = 0),
    strip.background = element_part_rect(side = "r"), strip.placement = "outside"
  ) +
  labs(x = "NUTM1\n(Transcripts per million)", y = "Cohort")
ggsave(pan_nutm1_dotplot, filename = here("plots", "pan_nutm1_dotplot.pdf"), width = 5, height = 5)
pan_nutm1_dotplot
```


## NUTM1 DEGs

```{r}
# Keep any infant with NUTM1r
# Keep any infant with NUTM1r
se$infant <- se$age.days <= 365

# Any SK samples with NUTM1r reassign the subtypes
colData(se)[se$cohort == "This Study" & se$NUTM1r == TRUE, "subtype"] <- "NUTM1"

deg_cohort <- colnames(se[, which((se$infant == TRUE & se$disease == "B-ALL" & !grepl("KMT", se$subtype) | (se$cohort == "This Study" & se$subtype == "non-KMT2A" & se$disease == "B-ALL")))])


se_sub <- se[, deg_cohort]
```


## DEseq2 normalization

Create DESeq object

```{r}
dds <- DESeqDataSet(se_sub, design = ~ rna.library.type + NUTM1r)
dds
```

at least X samples with a count of 10 or more

```{r}
keep <- rowSums(counts(dds) >= 10) >= (ncol(dds) * (0.10))
dds <- dds[keep,]
dds
```


Run DESeq

```{r}
dds <- DESeq(dds)
```

Normalized and scaled counts

```{r}
# Only use the most variable genes
vsd <- vst(dds, blind=FALSE)

# Genewise scaling
assay(vsd, "scaled") <- t(scale(t(assay(vsd))))

# Full table for future plotting
full_exp_df <- assay(vsd) %>%
  as.data.frame() %>%
  rownames_to_column(var = "Gene") %>%
  pivot_longer(cols = !Gene, names_to = "SampleId", values_to = "counts_norm") %>%
  left_join(colData(se_sub) %>% as.data.frame())
```


## DE test Wilcoxon rank sum

Count matrix preprocessing using edgeR package

```{r}
library(edgeR)
y <- DGEList(counts=assay(vsd),group=vsd$NUTM1r)

count_norm <- as.data.frame(assay(vsd))

count_norm <- na.omit(count_norm)
```

Run the Wilcoxon rank-sum test for each gene

```{r}
conditions = factor(se_sub$NUTM1r)
pvalues <- sapply(1:nrow(count_norm),function(i){
  # message(i)
     data<-cbind.data.frame(gene=as.numeric(t(count_norm[i,])),se_sub$NUTM1r)
     p=wilcox.test(gene~se_sub$NUTM1r, data, exact=F)$p.value
     return(p)
   })
fdr=p.adjust(pvalues,method = "fdr")
```


Calculate the fold-change for each gene
```{r}
conditionsLevel<-levels(factor(conditions))
dataCon1=count_norm[,c(which(conditions==conditionsLevel[1]))]
dataCon2=count_norm[,c(which(conditions==conditionsLevel[2]))]
foldChanges=log2(rowMeans(dataCon2)/rowMeans(dataCon1))
```


```{r}
outRst<-data.frame(log2foldChange=foldChanges, pValues=pvalues, FDR=fdr)
outRst$Gene <- rownames(outRst) <- rownames(count_norm)
outRst=na.omit(outRst)
fdrThres=0.05
```


```{r}
res_wil <- outRst %>%
  arrange(desc(log2foldChange)) %>%
  mutate(Gene = fct_reorder(Gene, log2foldChange, .desc = T))
res_wil
```

Flag sig genes

```{r}
p_thresh = 0.05
lfc_thresh = 0.25
# lfc_thresh = 2


res_wil$sig <- with(res_wil, ifelse(pValues < p_thresh & abs(log2foldChange) > lfc_thresh, "sig", "ns"))
# flag genes to label in volcano
res_wil$top_label <- with(res_wil, pValues < 0.001 & abs(log2foldChange) > 0.5)

res_wil$sign <- sign(res_wil$log2foldChange)

sig_genes <- as.character(res_wil[which(res_wil$sig == "sig"),]$Gene)

res_wil <- left_join(res_wil, gene_map, by = c("Gene" = "SYMBOL"))

table(res_wil$sig)
```


### Plots

Volcano plot
```{r, fig.width=5, fig.height=4}
# Label top most DE genes
gene_label <- res_wil %>%
  group_by(sign) %>%
  slice_min(pValues, n = 5, with_ties = F) %>%
  pull(Gene)

must_include <- c("NUTM1", "FOXC2", "FOXL1", "BMP2", "FLT3")

gene_label <- unique(c(gene_label, must_include))

lt <- "dashed"
al <- 1

nutm1_volcano_plot <- ggplot(res_wil, aes(x = log2foldChange, y = -log10(pValues))) +
  rasterize(geom_point(aes(color = sig), size = 0.5), dpi = 150) +
  scale_color_manual(values = c("grey80", "black")) +
  geom_segment(x = -Inf, xend = -lfc_thresh, y = -log10(p_thresh), yend = -log10(p_thresh), linetype = lt, alpha = al) +
  geom_segment(x = lfc_thresh, xend = Inf, y = -log10(p_thresh), yend = -log10(p_thresh), linetype = lt, alpha = al) +
  geom_segment(x = -lfc_thresh, xend = -lfc_thresh, y = -log10(p_thresh), yend = Inf, linetype = lt, alpha = al) +
  geom_segment(x = lfc_thresh, xend = lfc_thresh, y = -log10(p_thresh), yend = Inf, linetype = lt, alpha = al) +
  geom_label_repel(data = dplyr::filter(res_wil, Gene %in% gene_label), aes(label = Gene), size = 3, min.segment.length = 0) +
  labs(color = NULL) +
  theme_classic() +
  theme(aspect.ratio = 1)



ggsave(nutm1_volcano_plot, filename = here("plots", "nutm1_volcano_plot.pdf"), width = 5, height = 4)
nutm1_volcano_plot
```



### HOXA genes


```{r, fig.width=7, fig.height=2}
hoxa_plot <- full_exp_df_lfc %>%
  dplyr::filter(grepl("HOXA", Gene)) %>%
  mutate(Gene = factor(Gene, levels = gtools::mixedsort(unique(as.character(Gene))))) %>%
  ggplot(aes(x = NUTM1r, y = counts_norm)) +
  geom_boxplot(aes(color = NUTM1r), outlier.shape = NA) +
  geom_quasirandom(aes(color = NUTM1r), dodge.width = 0.8, size = 0.8) +
  facet_grid(.~Gene, scales = "free", space = "free_x", switch = "x") +
  labs(x = NULL, y = "Normalized counts") +
  ggpubr::stat_compare_means(method = "wilcox", label = "p.signif", label.x.npc = 0.5, label.y.npc = 0.9) +
  theme_classic() +
  theme(axis.ticks.x = element_blank(), axis.text.x = element_blank(), strip.background = element_blank(), strip.placement = "inside", panel.border = element_rect(fill = NA), axis.line = element_blank()) +
  ggthemes::scale_color_ptol()

ggsave(hoxa_plot, filename = here("plots", "hoxa_expression.pdf"), width = 7, height = 2)
hoxa_plot
```

### HLA Genes

```{r, fig.width=8, fig.height=2}
hla_plot <- full_exp_df_lfc %>%
  dplyr::filter(grepl("HLA-", Gene)) %>%
  mutate(HLA_class = ifelse(grepl("D", Gene), "MHC Class II", "MHC Class I")) %>%
  mutate(Gene = as.character(factor(Gene, levels = gtools::mixedsort(unique(as.character(Gene)))))) %>% 
  mutate(Gene = ifelse(HLA_class == "MHC Class II", gsub("HLA-", "", Gene), Gene)) %>%
  # filter(HLA_class == "MHC Class I") %>%
  ggplot(aes(x = NUTM1r, y = counts_norm)) +
  geom_boxplot(aes(color = NUTM1r), outlier.shape = NA) +
  geom_quasirandom(aes(color = NUTM1r), size = 0.5) +
  facet_nested(~HLA_class + Gene, scales = "free_x", space = "free_x", switch = "x") +
labs(x = NULL, y = "Normalized counts") +
  ggpubr::stat_compare_means(method = "wilcox", label = "p.signif", label.x = 1, label.y.npc = 0.9 ) +
  theme_classic() +
  theme(axis.ticks.x = element_blank(), axis.text.x = element_blank(), panel.spacing = unit(1, "mm"), strip.background = element_part_rect(side = "b", fill = NA), panel.border = element_part_rect(side = "tblr", fill = NA), axis.line = element_blank(), strip.text.x = element_text(size = 8, angle = 0)) +
  theme(strip.clip = "off", legend.position = "none") +
  ggthemes::scale_color_ptol()

ggsave(hla_plot, filename = here("plots", "hla_expression.pdf"), width = 8, height = 2)
hla_plot
```



## Expression Heatmap

```{r,fig.width=5, fig.height=3}
vsd$NUTM1 <- factor(vsd$NUTM1r, labels = c("NUTM1wt", "NUTM1r"))
top_anno <- HeatmapAnnotation(NUTM1 = vsd$NUTM1,
                              Cohort = vsd$cohort, 
                              col = list(NUTM1 = c("NUTM1wt" = "#4477AA", "NUTM1r" = "#CC6677"),
                                         Cohort = c("This Study" = "#DDCC77", "Pan B-ALL" = "#117733")))

# ggthemes::ptol_pal()(4)

ht <- Heatmap(matrix = assay(vsd[sig_genes, ], "scaled"), col = circlize::colorRamp2(breaks = c(-2, 0, 2), colors = c("blue", "white", "red")), top_annotation = top_anno, name = "Scaled expression", show_row_names = FALSE, show_column_names = FALSE)
ht
pdf(file = here("plots", "nutm1_deg_heatmap.pdf"), width = 6, height = 3)
draw(ht)
dev.off()

```



# GSVA

```{r}
library(GSVA)
library(GSEABase)
# library(GSVAdata)
# data(c2BroadSets)
library(msigdbr)

all_gene_sets = msigdbr(species = "Homo sapiens", category = "C2")
# all_gene_sets = msigdbr(species = "Homo sapiens", category = "C7")

head(all_gene_sets)


msigdbr_list = split(x = all_gene_sets$gene_symbol, f = all_gene_sets$gs_name)

gsva_res <- gsva(assay(vsd), gset.idx.list = msigdbr_list, min.sz=10, max.sz=500)
```


Run the Wilcoxon rank-sum test for each pathway

```{r}
conditions = factor(vsd$NUTM1r)
pvalues <- sapply(1:nrow(gsva_res),function(i){
  # message(i)
     data<-cbind.data.frame(gene=as.numeric(t(gsva_res[i,])),vsd$NUTM1r)
     p=wilcox.test(gene~vsd$NUTM1r, data, exact=F)$p.value
     return(p)
   })
fdr=p.adjust(pvalues,method = "fdr")

conditionsLevel<-levels(factor(conditions))
dataCon1=gsva_res[,c(which(conditions==conditionsLevel[1]))]
dataCon2=gsva_res[,c(which(conditions==conditionsLevel[2]))]
foldChanges=rowMeans(dataCon2) - rowMeans(dataCon1)

outRst<-data.frame(log2foldChange=foldChanges, pValues=pvalues, FDR=fdr)
outRst$Gene <- rownames(outRst) <- rownames(gsva_res)
outRst=na.omit(outRst)
fdrThres=0.05

res_wil_gsva <- outRst %>%
  arrange(desc(log2foldChange)) %>%
  mutate(Gene = fct_reorder(Gene, log2foldChange, .desc = T))
```


Downregulation of MHC Class II in NUTM1r samples

```{r}
df <- gsva_res %>%
  as.data.frame %>%
  rownames_to_column("pathway") %>%
  pivot_longer(cols = !pathway) %>%
  left_join(as.data.frame(colData(se_sub)), by = c("name" = "SampleId"))
```

## MHC I/II

Downregulation of MHC Class II in NUTM1r samples

```{r, fig.width=4, fig.height=3}
zscores <- t(apply(gsva_res, 1, scale))
colnames(zscores) <- colnames(gsva_res)

df <- zscores %>%
  as.data.frame() %>%
  rownames_to_column("pathway") %>%
  pivot_longer(cols = !pathway) %>%
  left_join(as.data.frame(colData(se_sub)), by = c("name" = "SampleId"))


mhc_paths <- c("REACTOME_CLASS_I_MHC_MEDIATED_ANTIGEN_PROCESSING_PRESENTATION", "REACTOME_MHC_CLASS_II_ANTIGEN_PRESENTATION")

mhc_pathway_plots <- df %>%
  filter(pathway %in% mhc_paths) %>%
  mutate(pathway = factor(pathway, labels = c("MHC Class I", "MHC Class II")),
         NUTM1 = factor(ifelse(NUTM1r, "NUTM1r", "NUTM1wt"), levels = c("NUTM1wt", "NUTM1r"))) %>%
  ggplot(aes(x = fct_reorder(NUTM1, -value, mean), y = value)) +
  geom_boxplot(aes(color = NUTM1)) +
  geom_quasirandom(aes(color = NUTM1)) +
  facet_grid(. ~ pathway) +
  ggpubr::stat_compare_means(label = "p.format", label.y.npc = 0.98) +
  ggthemes::scale_color_ptol() +
  theme(strip.clip = "off", strip.text.x = element_text(size = 12), strip.background = element_blank(), axis.ticks.x = element_blank(), axis.text.x = element_blank()) +
  labs(y = "Pathway Z-Score", x = NULL) +
  theme_classic()
ggsave(mhc_pathway_plots, filename = here("plots", "mhc_pathway_expression.pdf"), width = 4, height = 3)
mhc_pathway_plots
```


# GSEA

Setup gene lists for testing
```{r}
library(ReactomePA)
library(enrichplot)
library(clusterProfiler)


geneList <- res_wil$log2foldChange
names(geneList) <- res_wil$ENTREZID

geneList <- sort(geneList, decreasing = T)

# Remove duplicate names
geneList <- geneList[!duplicated(names(geneList))]

de <- res_wil[res_wil$sig == "sig", "ENTREZID"]

de_up_nutm1 <- res_wil[res_wil$sig == "sig" & res_wil$sign > 0, "ENTREZID"]
de_up_nutm1_gene <- res_wil[res_wil$sig == "sig" & res_wil$sign > 0, "ENTREZID"]

de_down_nutm1 <- res_wil[res_wil$sig == "sig" & res_wil$sign < 0, "ENTREZID"]

length(de)
```


```{r}
y <- gsePathway(geneList, 
                pvalueCutoff = 0.05,
                pAdjustMethod = "BH", 
                verbose = FALSE)

y <- setReadable(y, OrgDb = org.Hs.eg.db)
```


```{r, fig.width=10, fig.height=10}
y <- pairwise_termsim(y)
emap <- emapplot(y, color = "NES", showCategory = 30) +
  scale_fill_gradient(low = "blue", high = "red") +
  labs(fill = "NES")
ggsave(emap, file = here("plots", "nutm1_emapplot.pdf"), width = 10, height = 10)
emap
```


# Session Info

```{r}
devtools::session_info()
```
