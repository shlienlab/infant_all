---
title: "Figure 3: Ph-like analysis"
author: "Matthew Zatzman"
date: "`r Sys.Date()`"
execute: 
  warning: false
  error: false
format: 
  html:
    embed-resources: true
    code-tools: true
    toc: true
---


```{r setup, include = FALSE}
# library(sva)
# library(ggrepel)
# library(ggsci)
# library(ggrastr)
# library(plotly)
library(patchwork)
# library(RColorBrewer)
# library(tidyverse)
# library(here)
# library(SummarizedExperiment)
# library(DESeq2)
# library(ComplexHeatmap)
# library(Matrix)
# library(matrixStats)
# library(dittoSeq)
# library(scater)
# library(ggbeeswarm)
# library(TxDb.Hsapiens.UCSC.hg38.knownGene)
# library(org.Hs.eg.db)
# library(ggrepel)
# library(glue)
# library(ggh4x)
theme_set(theme_bw())

set.seed(3)
```

# Load data

```{r}
se <- readRDS(here("paper_data", "counts_se.rds"))
```


# LDA Gene list

```{r}
phlike_genelist <- c("BMPR1B", "CA6", "CHN2", "CRLF2", "ADGRF1", "IFITM1", "JCHAIN", 
"MUC4", "NRXN3", "PON2", "S100Z", "SEMA6A", "SLC2A5", "SPATS2L", 
"TP53INP1")
phlike_genelist %in% rownames(se)
```

Check for existence of the ph-like genes in our data. GPR110 is ADGRF1 and IJG is JCHAIN

Use UCell to score

```{r}
library(UCell)

set.seed(3)
ranks <- StoreRankings_UCell(assay(se, "tpm"), maxRank = 10000, ncores = 8)

scores <- ScoreSignatures_UCell(features = list(phlike = phlike_genelist), precalc.ranks = ranks, name = "")

normalize <- function(x, na.rm = TRUE) {
    return((x- min(x)) /(max(x)-min(x)))
}

se$phlike_score <- normalize(scores[,1])
```

Fuzzy KNN probabilities

```{r}
knn_probabilities <- read.table(file = here("paper_data", "knn_probs.txt"), header = T, sep = "\t")

knn_mat <- knn_probabilities %>%
  column_to_rownames("SampleId") %>%
  as.matrix()


phlike_prob <- knn_mat %>%
  as.data.frame() %>%
  rownames_to_column(var = "SampleId") %>%
  pivot_longer(cols = !SampleId, names_to = "Subtype", values_to = "phlike_prob") %>%
  filter(Subtype == "Ph.Ph.like")


new_coldata <- colData(se) %>%
  as.data.frame() %>%
  left_join(phlike_prob) %>%
  DataFrame()
rownames(new_coldata) <- new_coldata$SampleId

colData(se) <- new_coldata
```


```{r, fig.width=3, fig.height=3}
p_cor <- colData(se) %>%
  as.data.frame() %>%
  filter(disease == "B-ALL") %>%
  filter(!is.na(phlike_prob)) %>%
  ggplot(aes(x = phlike_prob, y = phlike_score)) +
  geom_point() +
  geom_smooth(method = "lm") +
  ggpubr::stat_cor() +
  labs(x = "Ph-like Probability\n(Fuzzy-KNN)", y = "Ph-like Signature Score") +
  theme_classic()
ggsave(p_cor, width = 3, height = 3, file = here("plots/phlike_sig_corplot.pdf"))

p_cor
```


Plot

```{r}
colData(se) %>%
  as.data.frame() %>%
  filter(cohort %in% c("Pan_Ball", "SK")) %>%
  ggplot(aes(x = fct_reorder(subtype, -phlike_score, median), y = phlike_score)) +
  geom_quasirandom(size = 1) +
  geom_violin(fill = NA, scale = "width") +
  geom_pointrange(stat = "summary",
    fun.min = function(z) {
      quantile(z, 0.25)
    },
    fun.max = function(z) {
      quantile(z, 0.75)
    },
    fun = median, color = "red", fatten = 4, linewidth = 1.25
  ) +
  guides(x = guide_axis(angle = 90)) +
  labs(x = "Subtype", y = "Ph-like 15 gene") +
  facet_grid(.~cohort, scales = "free", space = "free")
```


```{r, fig.width = 8, fig.height = 4}

p1_sig_top <- p1 <- colData(se) %>%
  as.data.frame() %>%
  filter(cohort %in% c("Pan_Ball")) %>%
  ggplot(aes(x = fct_reorder(subtype1, -phlike_score, median), y = phlike_score)) +
  geom_quasirandom(size = 1) +
  geom_violin(fill = NA, scale = "width") +
  geom_pointrange(stat = "summary",
    fun.min = function(z) {
      quantile(z, 0.25)
    },
    fun.max = function(z) {
      quantile(z, 0.75)
    },
    fun = median, color = "red", fatten = 1, linewidth = 1
  ) +
  guides(x = guide_axis(angle = 90)) +
  labs(x = "Subtype", y = "Ph-like Signature Score") +
  facet_grid(.~cohort, scales = "free", space = "free")


p2_sig_bot <- p2 <- colData(se) %>%
  as.data.frame() %>%
  filter(cohort %in% c("SK")) %>%
  mutate(cohort = "This Study") %>%
  ggplot(aes(x = fct_reorder(subtype, -phlike_score, median), y = phlike_score)) +
  geom_quasirandom(aes(size = phlike_prob)) +
  geom_violin(fill = NA, scale = "width") +
  geom_pointrange(stat = "summary",
    fun.min = function(z) {
      quantile(z, 0.25)
    },
    fun.max = function(z) {
      quantile(z, 0.75)
    },
    fun = median, color = "red", fatten = 1, linewidth = 1
  ) +
  guides(x = guide_axis(angle = 90)) +
  labs(x = "Subtype", y = "Ph-like Signature Score", size = "Ph-like Probability\n(Fuzzy-KNN)") +
  facet_grid(.~cohort, scales = "free", space = "free") +
  scale_radius(range = c(0.5, 4)) +
  coord_cartesian(ylim = c(0, 1))

p1 + p2 + plot_layout(nrow = 1, widths = c(1, 0.2))
```

Heatmap of SK samples showing ph like prob, phlike score, and expression of the genes themselves

```{r}
assay(se, "scaled") <- scale(log(assay(se, "tpm")+1))
```


## Try to build a better classifier

```{r}
# Get and label metadata
meta <- as.data.frame(colData(se))

meta$phlike <- (meta$subtype == "Ph/Ph-like")

# Remove lowly expressed genes?
keeps <- rowSums(assay(se, "counts") >= 10) >= 50

# Take 70% of each for training
set.seed(3)
meta %>%
  filter(cohort == "Pan_Ball") %>%
  slice_sample(prop = 0.7, by = "phlike") -> train

test <- meta[!meta$SampleId %in% train$SampleId,]

# Split intro training and test
train_dat <- t(assay(se[keeps,train$SampleId], "tpm"))
train_label <- train$phlike

test_dat <- t(assay(se[keeps,test$SampleId], "tpm"))
test_label <- test$phlike
```

```{r}
library(xgboost)
overwrite = F

dtrain <- xgb.DMatrix(data = train_dat, label = train_label)

dtest <- xgb.DMatrix(data = test_dat, label = test_label)

watchlist=list(train = dtrain, test=dtest)

param <- list(max_depth = 3, 
              min_child_weight = 1,
              gamma = 5,
              colsample_bytree = 0.1,
              # subsample = 0.5,
              eta = 0.1,
              nthread = 4,
              objective = "binary:logistic", 
              eval.metric = "aucpr",
              eval.metric = "error@0.2",
              eval.metric = "logloss"
              )

if (!file.exists(here("paper_data", "xgb/model")) | overwrite) {
  # bst <- xgboost(data = dtrain, params = param, nrounds = 5)
  set.seed(3)
  bst <- xgb.train(data = dtrain, params = param, nrounds = 300, watchlist = watchlist, early_stopping_rounds = 10, print_every_n = 10)
  # bst <- xgb.cv(data = dtrain, params = param, nrounds = 20, callbacks = list(cb.cv.predict(save_models = TRUE)), early_stopping_rounds = 5, prediction = T, nfold = 10)
  
  evaluation_log <- as.data.frame(attributes(bst)$evaluation_log)
  write.table(evaluation_log, file = here("paper_data", "xgb/log.txt"), quote = F, sep = "\t", row.names = F, col.names = T)
  xgb.save(bst, fname = here("paper_data", "xgb/model"))
} else {
  bst <- xgb.load(here("paper_data", "xgb/model"))
  evaluation_log <- read.table(file = here("paper_data", "xgb/log.txt"), header = T, sep = "\t")
}


```



```{r}
evaluation_log %>%
  ggplot(aes(x = iter)) +
  geom_line(aes(y = test_logloss, color = "Testing loss"), linewidth = 1) +
  geom_line(aes(y = train_logloss, color = "Training loss"), linewidth = 1) +
  labs(x = "Iterations", y = "Loss", color = NULL) +
  geom_vline(xintercept = bst$best_ntreelimit, linetype = "dotted")
```


```{r}
if (!file.exists(here("paper_data", "xgb_preds.txt"))) {
  pred_thresh <- 0.25
  pred <- predict(bst, test_dat, iteration_range = bst$best_ntreelimit)
  
  prediction <- pred >= pred_thresh
  
  err <- mean(prediction != test_label)
  print(paste("test-error=", err))
  pred_df <- data.frame(target = (test_label), prediction = (prediction))
  
  pred_df$target <- ifelse(pred_df$target, "Ph-like", "Not Ph-like")
  pred_df$prediction <- ifelse(pred_df$prediction, "Ph-like", "Not Ph-like")
} else {
  pred_df <- read.table(file = here("paper_data", "xgb_preds.txt"), header = T, sep = "\t")
}

```

```{r}
ml_metrics <- cvms::evaluate(pred_df, target_col = "target", prediction_cols = "prediction", type = "binomial")
ml_metrics
```

Prediction accuracy

```{r, fig.width = 4, fig.height=4}
library(cvms)

cfm <- as_tibble(table(pred_df))

p <- plot_confusion_matrix(cfm, 
                      target_col = "target", 
                      prediction_col = "prediction",
                      counts_col = "n",
                      add_sums = F, add_arrows = F) + 
  plot_annotation(title = "Dedicated classifier: Pan B-ALL cohort", subtitle = glue("Accuracy: {round(100*ml_metrics$Accuracy, digits = 1)}%\nSensitivity: {round(ml_metrics$Sensitivity*100, digits = 1)}%\nSpecificity: {round(ml_metrics$Specificity*100, digits = 1)}%"), theme = theme(plot.subtitle = element_text(size = 8)))
ggsave(p, file = here("plots", "phlike_ml_cfm.pdf"), width = 4, height = 4)
p 
```


Predict scores on the entire matrix

```{r}
all_pred_scores <- read.table(file = here("paper_data", "xgb_preds_all_samps.txt"), header = T, sep = "\t")

se$phlike_xgscore <- all_pred_scores$phlike_xgscore[match(colnames(se), all_pred_scores$SampleId)]
se$phlike_xgclass <- all_pred_scores$phlike_xgclass[match(colnames(se), all_pred_scores$SampleId)]

```

```{r, fig.width = 8, fig.height = 4}
# Match order
x_ord <- with(p1_sig_top$data, fct_reorder(subtype1, -phlike_score, median)) %>%
  levels()

p1 <- colData(se) %>%
  as.data.frame() %>%
  filter(cohort %in% c("Pan_Ball")) %>%
  # ggplot(aes(x = fct_reorder(subtype1, -phlike_xgscore, median), y = phlike_xgscore)) +
  ggplot(aes(x = fct_relevel(subtype1, x_ord), y = phlike_xgscore)) +
  geom_quasirandom(size = 0.25) +
  geom_violin(fill = NA, scale = "width") +
  geom_pointrange(stat = "summary",
    fun.min = function(z) {
      quantile(z, 0.25)
    },
    fun.max = function(z) {
      quantile(z, 0.75)
    },
    fun = median, color = "red", fatten = 1, linewidth = 1
  ) +
  guides(x = guide_axis(angle = 90)) +
  labs(x = "Subtype", y = "Ph-like probability\n(Dedicated classifier)") +
  facet_grid(.~cohort, scales = "free", space = "free")

p1bot <- colData(se) %>%
  as.data.frame() %>%
  filter(cohort %in% c("Pan_Ball")) %>%
  # ggplot(aes(x = fct_reorder(subtype1, -phlike_xgscore, median))) +
    ggplot(aes(x = fct_relevel(subtype1, x_ord))) +

  geom_bar(aes(fill = fct_relevel(as.factor(phlike_xgclass), "FALSE")), position = "fill") +
  guides(x = guide_axis(angle = 90), fill = guide_legend(reverse = T)) +
  labs(x = "Subtype", y = "Proportion", fill = "Ph/Ph-like Class") +
  facet_grid(.~cohort, scales = "free", space = "free") +
  scale_fill_manual(values = c("grey90", "black"))


p2 <- colData(se) %>%
  as.data.frame() %>%
  filter(cohort %in% c("SK")) %>%
  ggplot(aes(x = fct_reorder(subtype, -phlike_xgscore, median), y = phlike_xgscore)) +
  geom_quasirandom(size = 0.25) +
  geom_violin(fill = NA, scale = "width") +
  geom_pointrange(stat = "summary",
    fun.min = function(z) {
      quantile(z, 0.25)
    },
    fun.max = function(z) {
      quantile(z, 0.75)
    },
    fun = median, color = "red", fatten = 1, linewidth = 1
  ) +
  guides(x = guide_axis(angle = 90)) +
  labs(x = "Subtype", y = "Ph-like probability\n(Dedicated classifier)", size = "Ph-like Probability\n(Dedicated classifier)") +
  facet_grid(.~cohort, scales = "free", space = "free") +
  scale_radius(range = c(0.5, 4)) +
  coord_cartesian(ylim = c(0, 1))


p2bot <- colData(se) %>%
  as.data.frame() %>%
  filter(cohort %in% c("SK")) %>%
  ggplot(aes(x = fct_reorder(subtype1, -phlike_xgscore, median))) +
  geom_bar(aes(fill = fct_relevel(as.factor(phlike_xgclass), "FALSE")), position = "fill") +
  guides(x = guide_axis(angle = 90), fill = guide_legend(reverse = T)) +
  labs(x = "Subtype", y = "Proportion", fill = "Ph/Ph-like Assignment") +
  facet_grid(.~cohort, scales = "free", space = "free") +
  scale_fill_manual(values = c("grey90", "black"))

pver1 <- p1 + p2 + plot_layout(nrow = 1, widths = c(1, 0.2))
pver1
```


```{r, fig.width = 7, fig.height = 5}
addplot <- theme(axis.text.x = element_blank(), axis.title.x = element_blank(), axis.ticks.x = element_blank())
addplot2 <- theme(legend.position = "none", strip.background = element_blank(), strip.text = element_blank())
# pver2 <- (((p1+addplot) / p1bot) | ((p2 + addplot) / p2bot)) + plot_layout(widths = c(1, 0.2), guides = "collect")

pver2 <- ((p1_sig_top + addplot) + (p2_sig_bot + addplot) + 
         (p1+addplot + addplot2 + geom_hline(yintercept = pred_thresh, linetype = "dotted")) + (p2 + addplot + addplot2+ geom_hline(yintercept = pred_thresh, linetype = "dotted"))  + 
          (p1bot + addplot2) + (p2bot + addplot2 + theme(legend.position = "right"))) + 
  plot_layout(widths = c(1, 0.2), ncol = 2, nrow = 3, byrow = T, axes = "collect")

ggsave(pver2, file = here("plots/phlike_classifier_probs.pdf"), width = 7, height = 7)

pver2
```

Now run this on the inf all dataset

```{r}
sk_info <- read.table(file = here("output/supplemental_tables/", "Table_S1_nonKMT2Ar_cohort.txt"), sep = "\t", quote = "\"", header = T, stringsAsFactors = T, comment.char = "")

sk_dat <- t(assay(se[keeps,se$cohort == "SK"], "tpm"))

sk_pred <- predict(bst, sk_dat, iteration_range = bst$best_ntreelimit)

sk_phlike_xg <- colData(se) %>%
  as.data.frame() %>%
  filter(cohort == "SK")
```

Construct Heatmap

```{r, fig.width = 6, fig.height = 3}
phml_summaryplot <- sk_phlike_xg %>%
  filter(disease == "B-ALL", subtype != "KMT2A") %>%
  mutate(ML_class = phlike_xgscore >= pred_thresh) %>%
  ggplot(aes(x = fct_reorder(SampleId, -phlike_xgscore, mean))) +
  geom_col(aes(y = phlike_xgscore)) +
  geom_hline(yintercept = pred_thresh, linetype = "dotted") +
  geom_point(aes(y = phlike_prob, color = "Ph-like probability\n(Fuzzy-KNN)", shape = "Ph-like probability\n(Fuzzy-KNN)"), stroke = 1.5) +
  geom_point(aes(y = phlike_score, color = "Ph-like signature score", shape = "Ph-like signature score"), stroke = 1.5) +
  guides(x = guide_axis(angle = 45)) +
  scale_shape_manual(name = "", values = c("Ph-like signature score" = 3, "Ph-like probability\n(Fuzzy-KNN)" = 4)) +
  labs(y = "Ph-like probability\n(Dedicated classifier)") +
  scale_color_manual(name = "", values = c("red", "skyblue")) +
  labs(x = "Sample ID")
ggsave(phml_summaryplot, file = here("plots", "phml_plot.pdf"), width = 6, height = 3)
phml_summaryplot
```


# Session Info

```{r}
devtools::session_info()
```
